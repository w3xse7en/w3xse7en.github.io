[{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"zh","lastmod":1600599009,"objectID":"5a65ad8e6ca7097753803f6dd2d1682c","permalink":"https://w3xse7en.github.io/docs/lang/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/docs/lang/","section":"docs","summary":"Go","tags":null,"title":"Golang","type":"book"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"zh","lastmod":1600599009,"objectID":"c9795c39ea4320aa318cd11f1a77ba16","permalink":"https://w3xse7en.github.io/docs/web/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/docs/web/","section":"docs","summary":"net","tags":null,"title":"Web","type":"book"},{"authors":null,"categories":null,"content":"Building ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"zh","lastmod":1600599009,"objectID":"4cdd37113783e47641dd300543c94e1b","permalink":"https://w3xse7en.github.io/docs/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/docs/","section":"docs","summary":"Building ","tags":null,"title":"Introduction","type":"book"},{"authors":null,"categories":null,"content":" 考虑要为公司安装k8s，先尝试在本地搭建模拟k8s\n记录安装k8s过程的点点滴滴\n再次熟悉熟悉整个k8s架构\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"zh","lastmod":1602001847,"objectID":"b7c08c4e7ef8a3056c62ac89dde460cf","permalink":"https://w3xse7en.github.io/k8s_local/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/k8s_local/","section":"k8s_local","summary":"考虑要为公司安装k8s，先尝试在本地搭建模拟k8s\n记录安装k8s过程的点点滴滴\n再次熟悉熟悉整个k8s架构","tags":null,"title":"介绍","type":"book"},{"authors":null,"categories":null,"content":" Centos  清华大学centos7.8.2003镜像    清华大学镜像站   虚拟机  宿主机i5-6200u 2c16g 每台机器均为2c4g配置    hyper-v   网络  安装完的centos是不能上网的 此处使用桥接模式进行网络连接 使用桥接模式 使node和host处在同一网段更方便其他设备访问      桥接详情    配置Centos 静态ip地址 网段参考网桥ip  vi /etc/sysconfig/network-scripts/ifcfg-eth0 ONBOOT=yes BOOTPROTO=static IPADDR=192.168.1.201 NETMASK=255.255.255.0 GATEWAY=192.168.1.1 DNS1=192.168.1.1 service network restart    网络拓扑图   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1602001847,"objectID":"ee20968cb7e367612a59faeaa8fba794","permalink":"https://w3xse7en.github.io/k8s_local/hyper-v_install_centos/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/k8s_local/hyper-v_install_centos/","section":"k8s_local","summary":"Centos  清华大学centos7.8.2003镜像    清华大学镜像站   虚拟机  宿主机i5-6200u 2c16g 每台机器均为2c4g配置    hyper-v   网络  安装完的centos是不能上网的 此处使用桥接模式进行网络连接 使用桥接模式 使node和host处在同一网段更方便其他设备访问      桥接详情    配置Centos 静态ip地址 网段参考网桥ip  vi /etc/sysconfig/network-scripts/ifcfg-eth0 ONBOOT=yes BOOTPROTO=static IPADDR=192.","tags":null,"title":"hyper-v 安装 centos","type":"book"},{"authors":null,"categories":null,"content":"defer defer 是否会在panic后执行\ninterface  writing generic algorithm hiding implementation detail providing interception points  interface拥有两个指针 一个指向类型 一个指向具体值\nslice 分配在连续的内存地址上\n元素类型一致，元素存储宽度一致\n空间大小固定，不能修改\n可以通过索引计算出元素对应存储的位置（只需要知道数组内存的起始位置和数据元素宽度即可）\n会出现数据溢出的问题（下标越界）\nslice扩容 如果新的slice大小是当前大小2倍以上，则大小增长为新大小\n如果当前slice cap 小于1024，按每次2倍增长，否则每次按当前大小1/4增长。直到增长的大小超过或等于新大小\nappend的实现是在内存中将slice的array值赋值到新申请的array上\n性能\n通过上面我们知道slice的扩容涉及到内存的拷贝，这样带来的好处是数据存储在连续内存上，比随机访问快很多，最直接的性能提升就是缓存命中率会高很多,这也就是为什么slice不采用动态链表实现的原因吧\n我们知道拷贝内存数据是有开销的， 而其中最大的开销不在 memmove\n数据上，而是在开辟一块新内存malloc及之后的GC压力\n拷贝连续内存是很快的，随着cap变大，拷贝总成本还是 O(N) ,只是常数大了\n假如不想发生拷贝，那你就没有连续内存。此时随机访问开销会是：链表 O(N)\n当你能大致知道所需的最大空间（在大部分时候都是的）时，在make的时候预留相应的 cap 就好 如果需要的空间很大，而且每次都不确定，那就要在浪费内存和耗 CPU 在 malloc + gc 上做权衡 链表的查找操作是从第一个元素开始，所以相对数组要耗时间的多，因为采用这样的结构对读的性能有很大的提高\nmysql 性能调优 SQL优化 小表驱动大表 limit限定 索引添加 适当添加冗余字段，减少表关联。\n系统优化 max_connections 最大连接数\ninnodb_buffer_pool_size 数据缓冲区buffer pool大小\nsort_buffer_size 排序缓冲区内存大小\njoin_buffer_size 使用连接缓冲区大小\nread_buffer_size 全表扫描时分配的缓冲区大小\n缓存 主动式缓存 用户更新数据 同时更新缓存\n被动式缓存 用户更新数据 删除缓存，被读取时载入缓存\nMaps 线程不安全\n底层使用的hash结构\nhash算法使用aes hash hash值分为 高位hash和低位hash\n高位哈希值：是用来确定当前的bucket（桶）有没有所存储的数据的 bmap a bucket for a Go map\n低位哈希值：是用来确定，当前的数据存在了哪个bucket（桶）hmap a header for a go map\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1600599009,"objectID":"463e85d8ce80424f68c73ca2404fe50c","permalink":"https://w3xse7en.github.io/docs/lang/go/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/docs/lang/go/","section":"docs","summary":"defer defer 是否会在panic后执行\ninterface  writing generic algorithm hiding implementation detail providing interception points  interface拥有两个指针 一个指向类型 一个指向具体值\nslice 分配在连续的内存地址上\n元素类型一致，元素存储宽度一致\n空间大小固定，不能修改\n可以通过索引计算出元素对应存储的位置（只需要知道数组内存的起始位置和数据元素宽度即可）\n会出现数据溢出的问题（下标越界）\nslice扩容 如果新的slice大小是当前大小2倍以上，则大小增长为新大小\n如果当前slice cap 小于1024，按每次2倍增长，否则每次按当前大小1/4增长。直到增长的大小超过或等于新大小\nappend的实现是在内存中将slice的array值赋值到新申请的array上","tags":null,"title":"Go","type":"book"},{"authors":null,"categories":null,"content":"goroutine leak 协程泄露 Goroutine为什么没有ID号\nGoroutine调度 G P M 抢占式调度\n动态栈\n协程，线程，进程的区别 进程 进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位。每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。\n线程 线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。\n协程 协程是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。\nchannel select sync ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1600599009,"objectID":"9f49950b7dc601a23d820aa87a66214c","permalink":"https://w3xse7en.github.io/docs/lang/goroutine/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/docs/lang/goroutine/","section":"docs","summary":"goroutine leak 协程泄露 Goroutine为什么没有ID号\nGoroutine调度 G P M 抢占式调度\n动态栈\n协程，线程，进程的区别 进程 进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位。每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。\n线程 线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。\n协程 协程是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。\nchannel select sync ","tags":null,"title":"Goroutine","type":"book"},{"authors":null,"categories":null,"content":" 参考 kubespray\n[ Kube 65.1 ] Kubespray - Kubernetes cluster provisioning\nDeploying kubernetes using Kubespray\nINSTALLING A MULTINODE KUBERNETES CLUSTER USING KUBESPRAY\nit\u0026rsquo;s really really really hard run kubespray in china! #6207\n使用kubespray安装kubernetes\n使用kubespray搭建生产级高可用集群\n使用Kubespray安装k8s集群\ndocker/kubernetes国内源/镜像源解决方式\n  配置免密码登录 ssh-keygen -t rsa ssh-copy-id root@192.168.1.200 ssh-copy-id root@192.168.1.201 ssh-copy-id root@192.168.1.202   下载kubespray # master分支还在更新中，此处使用当前最新release的版本v2.14.1 git clone --single-branch -b v2.14.1 https://github.com/kubernetes-sigs/kubespray.git   安装python3-pip yum install python3-pip   安装kubespray依赖 pip3 install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/   使用ansible对每台机器进行批处理 配置ansible访问k8s集群hosts\nvi /etc/ansible/hosts  [k8s] 192.168.1.200 ansible_ssh_user=root 192.168.1.201 ansible_ssh_user=root 192.168.1.202 ansible_ssh_user=root   测试  ansible k8s -m ping   更新yum  ansible k8s -m shell -a 'yum update -y'   安装ntp服务，统一集群时间  ansible k8s -m shell -a 'yum install -y ntp \u0026amp;\u0026amp; systemctl enable ntpd \u0026amp;\u0026amp; systemctl start ntpd \u0026amp;\u0026amp; timedatectl set-timezone Asia/Shanghai \u0026amp;\u0026amp; timedatectl set-ntp yes \u0026amp;\u0026amp; ntpq -p'   配置ipv4转发  ansible k8s -m shell -a 'echo net.ipv4.ip_forward = 1 \u0026gt;\u0026gt; /etc/sysctl.conf \u0026amp;\u0026amp; sysctl -p'   关闭防火墙  ansible k8s -m shell -a 'systemctl stop firewalld \u0026amp;\u0026amp; systemctl disable firewalld'   生成kubespray所需配置  创建可自定义的配置  cp -rfp inventory/sample inventory/mycluster   IPS=(此处填写k8s集群的ip地址，注意空格分割)  declare -a IPS=(192.168.1.200 192.168.1.201 192.168.1.202)  CONFIG_FILE=inventory/mycluster/hosts.yaml python3 contrib/inventory_builder/inventory.py ${IPS[@]}   查看生成的hosts.yaml  cat inventory/mycluster/hosts.yaml   此处是 2个master 3个node 3个etcd 的高可用配置，可以根据喜好进行配置  all: hosts: node1: ansible_host: 192.168.1.200 ip: 192.168.1.200 access_ip: 192.168.1.200 node2: ansible_host: 192.168.1.201 ip: 192.168.1.201 access_ip: 192.168.1.201 node3: ansible_host: 192.168.1.202 ip: 192.168.1.202 access_ip: 192.168.1.202 children: kube-master: hosts: node1: node2: kube-node: hosts: node1: node2: node3: etcd: hosts: node1: node2: node3: k8s-cluster: children: kube-master: kube-node: calico-rr: hosts: {}   下载依赖   方案1\n 将所有源换成国内镜像加速    方案2\n 离线安装    方案3\n 设置代理    此处使用方案3\n  vi inventory/mycluster/group_vars/all/all.yml ## Set these proxy values in order to update package manager and docker daemon to use proxies http_proxy: \u0026quot;http://192.168.1.9:1080\u0026quot; https_proxy: \u0026quot;http://192.168.1.9:1080\u0026quot;   配置docker镜像源  方便未来使用docker访问国内源  vi inventory/mycluster/group_vars/all/docker.yml ## Add other registry,example China registry mirror. docker_registry_mirrors: - https://mirror.aliyuncs.com - https://registry.docker-cn.com   (可选)开启helm vi inventory/mycluster/group_vars/k8s-cluster/addons.yml # Helm deployment helm_enabled: true   安装 ansible-playbook -i inventory/mycluster/hosts.yaml --become --become-user=root cluster.yml    安装花费21分钟    验证   k8s v1.18.9安装成功    重置  若在安装过程中遇到问题可用以下命令重置  ansible-playbook -i inventory/mycluster/hosts.yaml reset.yml   Dashboard  Kubespray并没有替你创建用户，所以需要创建用户，然后获得Token，使用Token登录。    添加admin-user用户  vi dashboard-admin-user.yaml  apiVersion: v1 kind: ServiceAccount metadata: name: admin-user namespace: kube-system --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: admin-user roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-admin subjects: - kind: ServiceAccount name: admin-user namespace: kube-system  kubectl apply -f dashboard-admin-user.yaml   获取admin-user的token  kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}')   访问dashboard  https://192.168.1.200:6443/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login   Dashboard报错处理  services \u0026quot;https:kubernetes-dashboard:\u0026quot; is forbidden: User \u0026quot;system:anonymous\u0026quot; cannot get services/proxy in the namespace \u0026quot;kube-system\u0026quot;\n遇到此报错执行 添加system:anonymous的访问权限 步骤\n否则请跳过\n   添加system:anonymous的访问权限  vi dashboard-access.yaml  kind: ClusterRole apiVersion: rbac.authorization.k8s.io/v1 metadata: name: kubernetes-dashboard-anonymous rules: - apiGroups: [\u0026quot;\u0026quot;] resources: [\u0026quot;services/proxy\u0026quot;] resourceNames: [\u0026quot;https:kubernetes-dashboard:\u0026quot;] verbs: [\u0026quot;get\u0026quot;, \u0026quot;list\u0026quot;, \u0026quot;watch\u0026quot;, \u0026quot;create\u0026quot;, \u0026quot;update\u0026quot;, \u0026quot;patch\u0026quot;, \u0026quot;delete\u0026quot;] - nonResourceURLs: [\u0026quot;/ui\u0026quot;, \u0026quot;/ui/*\u0026quot;, \u0026quot;/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/*\u0026quot;] verbs: [\u0026quot;get\u0026quot;, \u0026quot;list\u0026quot;, \u0026quot;watch\u0026quot;, \u0026quot;create\u0026quot;, \u0026quot;update\u0026quot;, \u0026quot;patch\u0026quot;, \u0026quot;delete\u0026quot;] --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: kubernetes-dashboard-anonymous roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: kubernetes-dashboard-anonymous subjects: - kind: User name: system:anonymous  kubectl apply -f dashboard-access.yaml  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1602001847,"objectID":"acebafb9972ec53a6274e35e843ba90a","permalink":"https://w3xse7en.github.io/k8s_local/install_k8s/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/k8s_local/install_k8s/","section":"k8s_local","summary":"参考 kubespray\n[ Kube 65.1 ] Kubespray - Kubernetes cluster provisioning\nDeploying kubernetes using Kubespray\nINSTALLING A MULTINODE KUBERNETES CLUSTER USING KUBESPRAY\nit\u0026rsquo;s really really really hard run kubespray in china!","tags":null,"title":"kubespray 安装 k8s","type":"book"},{"authors":null,"categories":null,"content":"Q\u0026amp;A ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1600599009,"objectID":"6ee4c79689d3a2d079e1e9a64e95b680","permalink":"https://w3xse7en.github.io/docs/web/qa/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/docs/web/qa/","section":"docs","summary":"Q\u0026amp;A ","tags":null,"title":"Q\u0026A","type":"book"},{"authors":null,"categories":null,"content":"Q\u0026amp;A ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1600599009,"objectID":"733b544858ce4675758be5bc20ab3acc","permalink":"https://w3xse7en.github.io/docs/lang/qa/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/docs/lang/qa/","section":"docs","summary":"Q\u0026amp;A ","tags":null,"title":"Q\u0026A","type":"book"}]